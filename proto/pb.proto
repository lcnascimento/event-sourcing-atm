syntax = "proto3";
package proto;

import "google/protobuf/timestamp.proto";

enum ErrorKind {
  KIND_NOT_GIVEN = 0;
  BAD_REQUEST = 400;
  UNAUTHORIZED = 401;
  NOT_FOUND = 404;
  UNEXPECTED = 500;
}

enum ErrorSeverity {
  SEVERITY_NOT_GIVEN = 0;
  INFO = 1;
  WARNING = 2;
  ERROR = 3;
  CRITICAL = 4;
}

message Error {
  string message = 1;
  ErrorKind kind = 2;
  ErrorSeverity severity = 3;
  repeated string trace = 4;
}

message User {
  string id = 1;
  string name = 2;
  string cpf = 3;
  string email = 4;
  google.protobuf.Timestamp birthdate = 5;

  google.protobuf.Timestamp created_at = 15;
}

enum TransactionType {
  DEPOSIT = 0;
  WITHDRAW = 1;
  RECEIVED_TRANSFER = 2;
  RECEIVED_PERFORMED = 3;
  LOAN = 4;
}

message Transaction {
  string id = 1;
  TransactionType type = 2;
  string source_account = 3;
  string destiny_account = 4;
  float amount = 5;

  google.protobuf.Timestamp created_at = 15;
}

message Account {
  string id = 1;
  string password = 2;
  User owner = 3;
  float balance = 4;
  repeated Transaction last_transactions = 5;

  google.protobuf.Timestamp created_at = 15;
}

message CreateAccountRequest {
  User user = 2;
}

message CreateAccountResponse {
  Account account = 1;
  Error error = 2;
}

message DeleteAccountRequest {
  string account_id = 2;
}

message DeleteAccountResponse {
  Error error = 1;
}

message DepositRequest {
  string account_id = 2;
  float amount = 3;
}

message DepositResponse {
  Error error = 1;
}

message WithdrawRequest {
  string account_id = 2;
  float amount = 3;
}

message WithdrawResponse {
  Error error = 1;
}

message TransferRequest {
  string source_account_id = 2;
  string delivery_account_id = 3;
  float amount = 4;
}

message TranseResponse {
  Error error = 1;
}

message LoanRequest {
  string account_id = 2;
  float amount = 3;
}

message LoanResponse {
  Error error = 1;
}

service AccountsCommandService {
  rpc CreateAccountCommand (CreateAccountRequest) returns (CreateAccountResponse);
  rpc DeleteAccountCommand (DeleteAccountRequest) returns (DeleteAccountResponse);
  rpc DepositCommand (DepositRequest) returns (DepositResponse);
  rpc WithdrawCommand (WithdrawRequest) returns (WithdrawResponse);
  rpc TransferCommand (TransferRequest) returns (TranseResponse);
  rpc LoanCommand (LoanRequest) returns (LoanResponse);
}

message ListAccountsRequest {
  int32 page = 1;
  int32 page_count = 2;
}

message ListAccountsResponse {
  repeated Account accounts = 1;
  Error error = 2;
}

message FindAccountRequest {
  string account_id = 1;
}

message FindAccountResponse {
  Account account = 1;
  Error error = 2;
}

service AccountsQueryService {
  rpc List (ListAccountsRequest) returns (ListAccountsResponse);
  rpc Find (FindAccountRequest) returns (FindAccountResponse);
}
